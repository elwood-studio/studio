import { resolve, join } from 'node:path';
import { randomBytes } from 'node:crypto';
import invariant from 'ts-invariant';
import { Argv, Arguments } from 'yargs';
import { exists, dirAsync, writeAsync, removeAsync } from 'fs-jetpack';
import * as yaml from 'yaml';
import * as toml from '@iarna/toml';
import { sign } from 'jsonwebtoken';

export type Options = {
  dir?: string;
  force?: boolean;
};

export default async function register(cli: Argv) {
  cli.command<Options>(
    'init',
    'initialize a new project in the current directory',
    (y) => {
      y.option('dir', {
        alias: 'd',
        type: 'string',
        default: process.cwd(),
      });
      y.option('force', {
        alias: 'f',
        type: 'boolean',
        default: false,
      });
    },
    async (args: Arguments<Options>) => {
      const dir = resolve(args.dir || process.cwd());
      invariant(exists(dir), `Directory ${dir} does not exist.`);

      await handler({
        dir,
        force: args.force ?? false,
      });
    },
  );
}

export async function handler(options: Required<Options>) {
  const elwoodDir = join(options.dir, 'elwood');

  if (options.force && exists(elwoodDir)) {
    await removeAsync(elwoodDir);
  }

  invariant(
    exists(elwoodDir) === false,
    `Directory ${elwoodDir} already exists.`,
  );

  // make our dir
  await dirAsync(elwoodDir);

  const doc = yaml.parseDocument(`
# This file is generated by Elwood Studio.
# It will be merged with Elwood Studio service definitions. 
# You can add your own services below.
# https://elwood.studio/docs/cli/docker-compose
    `);

  doc.set('version', '3.8');

  // write our docker-compose.yml
  await writeAsync(join(elwoodDir, 'docker-compose.yml'), doc.toString());

  const iat = new Date().getTime() / 1000;
  const exp = 1799535600;
  const jwtSecret = randomBytes(62).toString('hex');
  const dbPassword = randomBytes(12).toString('hex');
  const anonKey = sign(
    {
      role: 'anon',
      iss: 'elwood',
      iat,
      exp,
    },
    jwtSecret,
  );
  const serviceKey = sign(
    {
      role: 'service_role',
      iss: 'elwood',
      iat,
      exp,
    },
    jwtSecret,
  );

  await writeAsync(
    join(elwoodDir, '.env'),
    Object.entries({
      POSTGRES_PASSWORD: dbPassword,
      JWT_SECRET: jwtSecret,
      ANON_KEY: anonKey,
      SERVICE_ROLE_KEY: serviceKey,
    })
      .map(([key, value]) => `${key}=${value}`)
      .join('\n'),
  );

  await writeAsync(
    join(elwoodDir, 'settings.toml'),
    toml.stringify({
      version: 0.1,
      fs: {
        a: false,
      },
      workflow: {
        a: false,
      },
      gateway: {
        port: '8000',
      },
      db: {
        host: 'db',
        name: 'postgres',
        user: 'postgres',
        port: '5432',
      },
      auth: {
        url: '',
        redirectUrls: '',
        disableSignup: false,
        externalUrl: '',
        email: {
          enabledSignup: false,
          enabledAutoconfirm: false,
        },
        phone: {
          enabledSignup: false,
          enabledAutoconfirm: false,
        },
      },
      smtp: {
        host: 'mail',
        port: '2500',
        user: '',
        pass: '',
        sender: '',
      },
      rest: {
        schemas: [],
      },
    }),
  );
}
